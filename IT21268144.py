# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ywe9TFUBoUEuW0PhfkcClMug7Zja45ps
"""

#TASK_01

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from scipy.stats import pearsonr, spearmanr


# Create a 4x4 array from an exponential distribution
array_4x4 = np.random.exponential(scale=1.0, size=(4, 4))
print(array_4x4)


# Create a 100000x1 array from an exponential distribution
array_100000 = np.random.exponential(scale=1.0, size=(100000, 1))

# Plot histogram
plt.hist(array_100000, density=True, bins=100, histtype="step", color="blue", label="Exponential")
plt.hist(np.random.rand(100000), density=True, bins=100, histtype="step", color="green", label="Uniform")
plt.hist(np.random.randn(100000), density=True, bins=100, histtype="step", color="red", label="Normal")
plt.legend(loc="upper right")
plt.title("Random Distributions")
plt.xlabel("Value")
plt.ylabel("Density")
plt.show()

from mpl_toolkits.mplot3d import Axes3D

# Create data
X = np.linspace(-5, 5, 100)
Y = np.linspace(-5, 5, 100)
X, Y = np.meshgrid(X, Y)
Z = X*2 + Y*2

# Plot
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X, Y, Z, cmap='viridis')
ax.set_title("3D plot of Z = X^2 + Y^2")
ax.set_xlabel("X")
ax.set_ylabel("Y")
ax.set_zlabel("Z")
plt.show()

# Example data, replace with actual data
data = pd.DataFrame({
    'HP': np.random.randint(50, 100, 100),
    'Attack': np.random.randint(50, 100, 100),
    'Defense': np.random.randint(50, 100, 100),
    'Sp. Atk': np.random.randint(50, 100, 100),
    'Sp. Def': np.random.randint(50, 100, 100),
    'Speed': np.random.randint(50, 100, 100)
})

# Calculate Pearson and Spearman correlations
pearson_corr = data.corr(method='pearson')
spearman_corr = data.corr(method='spearman')

# Visualize heatmaps
fig, ax = plt.subplots(1, 2, figsize=(12, 6))
sns.heatmap(pearson_corr, annot=True, cmap='coolwarm', ax=ax[0])
ax[0].set_title('Pearson Correlation')
sns.heatmap(spearman_corr, annot=True, cmap='coolwarm', ax=ax[1])
ax[1].set_title('Spearman Correlation')
plt.show()

#TASK_02

# Load the dataset

data = pd.read_csv('/content/drive/MyDrive/Au_nanoparticle_dataset.csv')  # Update path accordingly

# Filter columns
filtered_data = data[['N_total', 'N_bulk', 'N_surface', 'R_avg']]
print(filtered_data.head(20))

# Calculate mean, std, and quartiles
stats = filtered_data.describe()
print(stats.loc[['mean', 'std', '25%', '50%', '75%']])

# Plot histograms
filtered_data.hist(layout=(1, 4), figsize=(20, 5))
plt.show()

# Pairplot
g = sns.pairplot(filtered_data)
g.map_diag(sns.histplot, kde=True)
g.map_lower(sns.kdeplot)
plt.show()